from libraries.errors import *
from hydra import compose, initialize
import glob
class Config:
    '''
    Used to read a directory with yaml config files and return all information
    in a dictionary.
    Example:
    /etc/config/global/global_config.yaml
    /etc/config/mailbox/001.yaml
    /etc/config/mailbox/002.yaml

    This class will generate a dict with the following format when you point it
    to /etc/config:
    {'global':
        {'global_config':
            {yaml-data...},
        },
    mailbox:
        {'001':
            {yaml-data...},
        },
        {'002':
            {yaml-data...},
        }
    }
    Attributes:
        - data: dictionary to be returned with all 
    Methods:
        read_files: 
        get_config
    '''
    def __init__(self, config_path: str) -> None:
        """
        This is the constructor. It initializes the data dict and calls the
        read_files method that will fill up the data dict with the information
        of all yaml files.
        """
        self.__data: dict = {}
        self.__config_path = config_path
        self.read_files(self.__config_path)

    def read_files(self,config_path: str) -> None:
        """
        This method reads all yaml files in the given directory and build a 
        dictionary with all information inside the yaml files.
        Args:
            config_path: absolute path where files will be read.
        Returns:
            None
        Raises:
            TypeError: when config_path is not a string
            EmptyVariableError: when config_path is empty
        """        
        if not isinstance(config_path, str):
            raise TypeError(
                f"Path must be a string instead of `{config_path.__class__.__name__}`"
                )
        if not config_path:
            raise EmptyVariableError("config_path")
        for filename in glob.iglob(config_path + '**/*.yaml', recursive=True):
            (type, object) = (
                filename.split('/')[-2],
                filename.split('/')[-1].split('.')[0]
                )
            with initialize(
                version_base=None, 
                config_path=f"../{filename.split('/')[-3]}/{filename.split('/')[-2]}"):
                if not type in self.__data:
                    self.__data[type] = {} 
                if not object in self.__data[type]:
                    self.__data[type][object] = compose(config_name=object)

    
    def get_config(self) -> dict:
        """
        This method is used to retrieve the dictionary with the information
        generated by read_files function.
        Args:
            None
        Returns:
            dict: 
        Raises:
            Nothing
        """          
        return self.__data